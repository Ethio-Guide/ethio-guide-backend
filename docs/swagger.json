{
    "swagger": "2.0",
    "info": {
        "description": "This is the API server for the EthioGuide application.",
        "title": "EthioGuide API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/ai/guide": {
            "post": {
                "description": "Interact with the chatbot.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI"
                ],
                "summary": "AI Chat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Prompt",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.AIChatRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response",
                        "schema": {
                            "$ref": "#/definitions/controller.AIConversationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ai/history": {
            "get": {
                "description": "Get Paginated ai chat history",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI"
                ],
                "summary": "Get Paginated ai chat history",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Results per page (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.PaginatedAIHisoryResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameter",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/ai/translate": {
            "post": {
                "description": "Get translation of content in different languages.",
                "tags": [
                    "AI"
                ],
                "summary": "Translate Content",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Preferred language (default: en)",
                        "name": "lang",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Content to be translated",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.TranslateDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Translated output",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/forgot": {
            "post": {
                "description": "Forgot password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Forgot Password",
                "parameters": [
                    {
                        "description": "User Email",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.ForgotDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reset token sent",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Login a user account with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Login a new user",
                "parameters": [
                    {
                        "description": "User Registration Details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Login Successful",
                        "schema": {
                            "$ref": "#/definitions/controller.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/logout/": {
            "post": {
                "description": "Logout a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Log out successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "description": "Get user's profile detail.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Get Profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile Retrieved",
                        "schema": {
                            "$ref": "#/definitions/controller.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/me/": {
            "patch": {
                "description": "Update user's profile.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Update Profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Updated Account Details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.UserUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account Updated",
                        "schema": {
                            "$ref": "#/definitions/domain.Account"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/me/password": {
            "patch": {
                "description": "Update user's password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Update password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Password Change Detail",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/me/preferences": {
            "get": {
                "description": "Get user preferences",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get Preferences",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detail of user preferences",
                        "schema": {
                            "$ref": "#/definitions/controller.PreferencesDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update user preferences",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update Preferences",
                "parameters": [
                    {
                        "description": "update user preferences detail.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.PreferencesDTO"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detail of user preferences",
                        "schema": {
                            "$ref": "#/definitions/controller.PreferencesDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refresh Access Token for web and mobile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh Access Token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New Access Token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Creates a new user account with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User Registration Details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created Successfully",
                        "schema": {
                            "$ref": "#/definitions/controller.UserResponse"
                        }
                    },
                    "400": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/reset": {
            "post": {
                "description": "Reset password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Reset Password",
                "parameters": [
                    {
                        "description": "Reset Token and New Password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.ResetDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reset token sent",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/social": {
            "post": {
                "description": "Login with third party auth.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Social Login",
                "parameters": [
                    {
                        "description": "Social Login Detail.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.SocialLoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/controller.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/verify": {
            "post": {
                "description": "Verify User Account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify Account",
                "parameters": [
                    {
                        "description": "Reset Token and New Password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.ActivateDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reset token sent",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/categories": {
            "get": {
                "description": "Get list of categories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Get Categories",
                "parameters": [
                    {
                        "type": "string",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "asc | desc",
                        "name": "sortOrder",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "parentID",
                        "name": "parentID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "organizationID",
                        "name": "organizationID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "title",
                        "name": "title",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Categories",
                        "schema": {
                            "$ref": "#/definitions/controller.PaginatedCategoryResponse"
                        }
                    },
                    "400": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a category for procedures",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Create Category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Category Details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.CreateCategoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New Category",
                        "schema": {
                            "$ref": "#/definitions/domain.Category"
                        }
                    },
                    "400": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/checklists": {
            "post": {
                "description": "Create new checklist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Checklist"
                ],
                "summary": "Create Checklist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Procedure ID",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.CreateChecklistRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Checklist added",
                        "schema": {
                            "$ref": "#/definitions/controller.UserProcedureResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/checklists/myProcedures": {
            "get": {
                "description": "Get User's ongoing procedures list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Checklist"
                ],
                "summary": "Get User's Procedures",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Checklist added",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controller.UserProcedureResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/checklists/{checklistID}": {
            "patch": {
                "description": "Update Checklist by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Checklist"
                ],
                "summary": "Update Checklist by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the id of the checklist to be marked done or undone",
                        "name": "checklistID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Checklist added",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controller.UserProcedureResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/checklists/{userProcedureId}": {
            "get": {
                "description": "Get Checklist by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Checklist"
                ],
                "summary": "Get User's Ongoing Procedures by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "UserProcedureId",
                        "name": "userProcedureId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Checklist added",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controller.ChecklistResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/discussions": {
            "get": {
                "description": "Fetch list of posts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Post"
                ],
                "summary": "Fetch Posts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "procedure ids",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "description": "procedure ids",
                        "name": "procedure_ids",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "description": "tags",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sort_by",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "sort_order",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Posts",
                        "schema": {
                            "$ref": "#/definitions/controller.PaginatedPostsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new post.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Post"
                ],
                "summary": "Create Post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Post Detail",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.CreatePostDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Post Created",
                        "schema": {
                            "$ref": "#/definitions/domain.Post"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/discussions/{id}": {
            "get": {
                "description": "Fetch a post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Post"
                ],
                "summary": "Fetch Post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Post",
                        "schema": {
                            "$ref": "#/definitions/domain.Post"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Post"
                ],
                "summary": "Delete Post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Post"
                ],
                "summary": "Update Post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Post update details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.UpdatePostDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Post",
                        "schema": {
                            "$ref": "#/definitions/domain.Post"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/feedback": {
            "get": {
                "description": "Fetch list of feedbacks for admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feedback"
                ],
                "summary": "Fetch Feedbacks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Procedure ID",
                        "name": "procedure_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feedbacks",
                        "schema": {
                            "$ref": "#/definitions/controller.FeedbackListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/feedback/{id}": {
            "patch": {
                "description": "Update the status of a feedback",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feedback"
                ],
                "summary": "Update Feedback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Feedback ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Status of Feedback",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.FeedbackStatePatchRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Feedback Updated Successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/notices": {
            "get": {
                "description": "Search and filter Notices with pagination, sorting, and various filters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notice"
                ],
                "summary": "Get List of Notices",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Results per page (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by organization ID",
                        "name": "organizationId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by field (e.g. createdAt, fee, processingTime)",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order: ASC or DESC (default DESC)",
                        "name": "sortOrder",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Notices",
                        "schema": {
                            "$ref": "#/definitions/controller.NoticeListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create new notice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notice"
                ],
                "summary": "Create Notice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Procedure Detail",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.NoticeDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notice Created successfully.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/notices/{id}": {
            "delete": {
                "description": "Deletes an existing Notice. Requires admin or organization ownership.",
                "tags": [
                    "Notice"
                ],
                "summary": "Delete Notice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Notice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notice Deleted successfully."
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update a notice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notice"
                ],
                "summary": "Update Notice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Notice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Details of updated notice",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.NoticeDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notice Updated successfully.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/orgs": {
            "get": {
                "description": "Get list of organizations.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Get List of Organizations",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Results per page (default 10)",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by organization ID",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by field (e.g. createdAt, fee, processingTime)",
                        "name": "q",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Organization created Successfully",
                        "schema": {
                            "$ref": "#/definitions/controller.OrgsListPaginated"
                        }
                    },
                    "400": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new organization account with the provided details. Must be an admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Create an Organization Account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Organization details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.OrgCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Organization created Successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/orgs/{id}": {
            "get": {
                "description": "Get an organization's details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Get an Organization Account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization Account ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Organization created Successfully",
                        "schema": {
                            "$ref": "#/definitions/controller.OrganizationResponseDTO"
                        }
                    },
                    "400": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update an organization's details. Must be an owner of the account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Update an Organization Account Detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Organization Account ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Details of Organization.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.UpdateOrgRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "organization updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/procedures": {
            "get": {
                "description": "Search and filter procedures with pagination, sorting, and various filters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Procedures"
                ],
                "summary": "Search and Filter Procedures",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Results per page (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search by procedure name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by organization ID",
                        "name": "organizationID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by group ID",
                        "name": "groupID",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum processing days",
                        "name": "minProcessingDays",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum processing days",
                        "name": "maxProcessingDays",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by field (e.g. createdAt, fee, processingTime)",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order: ASC or DESC (default DESC)",
                        "name": "sortOrder",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.PaginatedProcedureResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid parameter",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create new procedure.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Procedures"
                ],
                "summary": "Create Procedure",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Procedure Detail",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.ProcedureCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Procedure Created",
                        "schema": {
                            "$ref": "#/definitions/domain.Procedure"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/procedures/{id}": {
            "get": {
                "description": "Retrieves a single procedure by its unique ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Procedures"
                ],
                "summary": "Get Procedure by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Procedure ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Procedure"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an existing procedure. Requires admin or organization ownership.",
                "tags": [
                    "Procedures"
                ],
                "summary": "Delete Procedure",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Procedure ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Updates an existing procedure. Requires admin or organization ownership.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Procedures"
                ],
                "summary": "Update Procedure",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Procedure ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Procedure Update Data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Procedure"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/procedures/{id}/feedback": {
            "get": {
                "description": "Fetch list of feedbacks for a procedure",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feedback"
                ],
                "summary": "Fetch Feedbacks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Procedure ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Feedbacks",
                        "schema": {
                            "$ref": "#/definitions/controller.FeedbackListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Submit a feedback for a procedure",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feedback"
                ],
                "summary": "Submit Feedback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Procedure ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Feedback Detail",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.FeedbackCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Feedback Submitted Successfully",
                        "schema": {
                            "$ref": "#/definitions/domain.Feedback"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/search": {
            "get": {
                "description": "Application wide search.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Search"
                ],
                "summary": "Search",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search term",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Results per page (default 10)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search Results",
                        "schema": {
                            "$ref": "#/definitions/controller.SearchResultResponse"
                        }
                    },
                    "400": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "invalid",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.AIChatRequest": {
            "type": "object",
            "required": [
                "query"
            ],
            "properties": {
                "query": {
                    "type": "string"
                }
            }
        },
        "controller.AIConversationResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "procedures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.AIProcedureResponse"
                    }
                },
                "request": {
                    "type": "string"
                },
                "response": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "controller.AIProcedureResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "controller.AccountOrgSearchResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "organization_detail": {
                    "$ref": "#/definitions/controller.OrganizationDetailResponse"
                },
                "profile_pic_url": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/domain.Role"
                }
            }
        },
        "controller.ActivateDTO": {
            "type": "object",
            "properties": {
                "activationToken": {
                    "type": "string"
                }
            }
        },
        "controller.CategoryResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "controller.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "new_password",
                "old_password"
            ],
            "properties": {
                "new_password": {
                    "type": "string"
                },
                "old_password": {
                    "type": "string"
                }
            }
        },
        "controller.ChecklistResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "The actual checklist item",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_checked": {
                    "description": "Whether the item is completed",
                    "type": "boolean"
                },
                "type": {
                    "description": "\"Requirement\" or \"Step\"",
                    "type": "string"
                },
                "user_procedure_id": {
                    "type": "string"
                }
            }
        },
        "controller.ContactInfoDTO": {
            "type": "object",
            "properties": {
                "socials": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "controller.ContactInfoResponse": {
            "type": "object",
            "properties": {
                "socials": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "controller.ContactInfoUpdate": {
            "type": "object",
            "properties": {
                "socials": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "controller.CreateCategoryRequest": {
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "id": {
                    "type": "string"
                },
                "organization_id": {
                    "description": "OrganizationID string `json:\"organization_id\" binding:\"required\"`",
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "controller.CreateChecklistRequest": {
            "type": "object",
            "properties": {
                "procedure_id": {
                    "type": "string"
                }
            }
        },
        "controller.CreatePostDTO": {
            "type": "object",
            "required": [
                "content",
                "title"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "procedures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "controller.FeedbackCreateRequest": {
            "type": "object",
            "required": [
                "content",
                "type"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "inaccuracy",
                        "outdated",
                        "thanks",
                        "missing"
                    ]
                }
            }
        },
        "controller.FeedbackListResponse": {
            "type": "object",
            "properties": {
                "feedbacks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.FeedbackResponse"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "controller.FeedbackResponse": {
            "type": "object",
            "properties": {
                "admin_response": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "dislike_count": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "like_count": {
                    "type": "integer"
                },
                "procedure_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "view_count": {
                    "type": "integer"
                }
            }
        },
        "controller.FeedbackStatePatchRequest": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "admin_response": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "new",
                        "in_progress",
                        "resolved",
                        "declined"
                    ]
                }
            }
        },
        "controller.ForgotDTO": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "controller.LoginRequest": {
            "type": "object",
            "required": [
                "identifier",
                "password"
            ],
            "properties": {
                "identifier": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "controller.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/controller.UserResponse"
                }
            }
        },
        "controller.NoticeDTO": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "controller.NoticeListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.NoticeDTO"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "controller.OrgCreateRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "controller.OrganizationDetailDTO": {
            "type": "object",
            "properties": {
                "contact_info": {
                    "$ref": "#/definitions/controller.ContactInfoDTO"
                },
                "description": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "phone_numbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "description": "assuming OrganizationType is a custom enum",
                    "type": "string"
                }
            }
        },
        "controller.OrganizationDetailResponse": {
            "type": "object",
            "properties": {
                "contact_info": {
                    "$ref": "#/definitions/controller.ContactInfoResponse"
                },
                "description": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "phone_numbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "$ref": "#/definitions/domain.OrganizationType"
                }
            }
        },
        "controller.OrganizationDetailUpdate": {
            "type": "object",
            "properties": {
                "contactInfo": {
                    "$ref": "#/definitions/controller.ContactInfoUpdate"
                },
                "description": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "phoneNumbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "description": "\"gov\" | \"private\"",
                    "type": "string"
                }
            }
        },
        "controller.OrganizationResponseDTO": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "organization_detail": {
                    "$ref": "#/definitions/controller.OrganizationDetailDTO"
                },
                "profile_pic_url": {
                    "type": "string"
                },
                "role": {
                    "description": "assuming domain.Role is a string or enum",
                    "type": "string"
                }
            }
        },
        "controller.OrgsListPaginated": {
            "type": "object",
            "properties": {
                "orgs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.OrganizationResponseDTO"
                    }
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "controller.PaginatedAIHisoryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.AIConversationResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/controller.Pagination"
                }
            }
        },
        "controller.PaginatedCategoryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.CategoryResponse"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "controller.PaginatedPostsResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "posts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Post"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "controller.PaginatedProcedureResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.ProcedureResponse"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/controller.Pagination"
                }
            }
        },
        "controller.Pagination": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "controller.PreferencesDTO": {
            "type": "object",
            "properties": {
                "emailNotification": {
                    "type": "boolean"
                },
                "preferredLang": {
                    "type": "string"
                },
                "pushNotification": {
                    "type": "boolean"
                }
            }
        },
        "controller.ProcedureContentResponse": {
            "type": "object",
            "properties": {
                "prerequisites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "result": {
                    "type": "string"
                },
                "steps": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "controller.ProcedureCreateRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "groupId": {
                    "type": "string"
                },
                "label": {
                    "description": "Fees",
                    "type": "string"
                },
                "maxDays": {
                    "type": "integer"
                },
                "minDays": {
                    "description": "ProcessingTime",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "string"
                },
                "prerequisites": {
                    "description": "content",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "result": {
                    "type": "string"
                },
                "steps": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "controller.ProcedureFeeResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "controller.ProcedureResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "$ref": "#/definitions/controller.ProcedureContentResponse"
                },
                "createdAt": {
                    "type": "string"
                },
                "fees": {
                    "$ref": "#/definitions/controller.ProcedureFeeResponse"
                },
                "groupId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "noticeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "organizationId": {
                    "type": "string"
                },
                "processingTime": {
                    "$ref": "#/definitions/controller.ProcessingTimeResponse"
                }
            }
        },
        "controller.ProcessingTimeResponse": {
            "type": "object",
            "properties": {
                "maxDays": {
                    "type": "integer"
                },
                "minDays": {
                    "type": "integer"
                }
            }
        },
        "controller.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "preferredLang": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "controller.ResetDTO": {
            "type": "object",
            "properties": {
                "new_password": {
                    "type": "string"
                },
                "resetToken": {
                    "type": "string"
                }
            }
        },
        "controller.SearchResultResponse": {
            "type": "object",
            "properties": {
                "organizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controller.AccountOrgSearchResponse"
                    }
                },
                "procedures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Procedure"
                    }
                }
            }
        },
        "controller.SocialLoginRequest": {
            "type": "object",
            "required": [
                "code",
                "provider"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "provider": {
                    "$ref": "#/definitions/domain.AuthProvider"
                }
            }
        },
        "controller.TranslateDTO": {
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "content": {
                    "type": "string"
                }
            }
        },
        "controller.UpdateOrgRequest": {
            "type": "object",
            "properties": {
                "contact_info": {
                    "$ref": "#/definitions/controller.ContactInfoUpdate"
                },
                "description": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "phone_numbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "profile_pic_url": {
                    "type": "string"
                }
            }
        },
        "controller.UpdatePostDTO": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "procedures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "controller.UserDetailUpdate": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string"
                }
            }
        },
        "controller.UserProcedureResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "percent": {
                    "type": "integer"
                },
                "procedure_id": {
                    "type": "string"
                },
                "status": {
                    "description": "e.g., \"Not Started\", \"In Progress\", \"Completed\"",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "controller.UserResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_verified": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "profile_picture": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/domain.Role"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "controller.UserUpdateRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "organizationDetail": {
                    "$ref": "#/definitions/controller.OrganizationDetailUpdate"
                },
                "profilePicURL": {
                    "type": "string"
                },
                "userDetail": {
                    "description": "Mutually exclusive blocks",
                    "allOf": [
                        {
                            "$ref": "#/definitions/controller.UserDetailUpdate"
                        }
                    ]
                }
            }
        },
        "domain.Account": {
            "type": "object",
            "properties": {
                "authProvider": {
                    "$ref": "#/definitions/domain.AuthProvider"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "organizationDetail": {
                    "$ref": "#/definitions/domain.OrganizationDetail"
                },
                "passwordHash": {
                    "type": "string"
                },
                "profilePicURL": {
                    "type": "string"
                },
                "providerID": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/domain.Role"
                },
                "userDetail": {
                    "$ref": "#/definitions/domain.UserDetail"
                }
            }
        },
        "domain.AuthProvider": {
            "type": "string",
            "enum": [
                "local",
                "google",
                "faida"
            ],
            "x-enum-varnames": [
                "AuthProviderLocal",
                "AuthProviderGoogle",
                "AuthProviderFaida"
            ]
        },
        "domain.Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "organizationID": {
                    "type": "string"
                },
                "parentID": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "domain.ContactInfo": {
            "type": "object",
            "properties": {
                "socials": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "domain.Feedback": {
            "type": "object",
            "properties": {
                "adminResponse": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "createdAT": {
                    "type": "string"
                },
                "dislikeCount": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "likeCount": {
                    "type": "integer"
                },
                "procedureID": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/domain.FeedbackStatus"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "$ref": "#/definitions/domain.FeedbackType"
                },
                "updatedAT": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                },
                "viewCount": {
                    "type": "integer"
                }
            }
        },
        "domain.FeedbackStatus": {
            "type": "string",
            "enum": [
                "new",
                "in_progress",
                "resolved",
                "declined"
            ],
            "x-enum-varnames": [
                "NewFeedback",
                "InProgressFeedback",
                "ResolvedFeedback",
                "DeclinedFeedback"
            ]
        },
        "domain.FeedbackType": {
            "type": "string",
            "enum": [
                "inaccuracy",
                "outdated",
                "thanks",
                "missing"
            ],
            "x-enum-varnames": [
                "InaccuracyFeedback",
                "OutdatedFeedback",
                "ThanksFeedback",
                "MissingFeedback"
            ]
        },
        "domain.OrganizationDetail": {
            "type": "object",
            "properties": {
                "contactInfo": {
                    "$ref": "#/definitions/domain.ContactInfo"
                },
                "description": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "phoneNumbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "$ref": "#/definitions/domain.OrganizationType"
                }
            }
        },
        "domain.OrganizationType": {
            "type": "string",
            "enum": [
                "gov",
                "private"
            ],
            "x-enum-varnames": [
                "OrgTypeGov",
                "OrgTypePrivate"
            ]
        },
        "domain.Post": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "procedures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "domain.Procedure": {
            "type": "object",
            "properties": {
                "content": {
                    "$ref": "#/definitions/domain.ProcedureContent"
                },
                "createdAt": {
                    "type": "string"
                },
                "embedding": {
                    "type": "array",
                    "items": {
                        "type": "number",
                        "format": "float64"
                    }
                },
                "fees": {
                    "$ref": "#/definitions/domain.ProcedureFee"
                },
                "groupID": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "noticeIDs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "organizationID": {
                    "type": "string"
                },
                "processingTime": {
                    "$ref": "#/definitions/domain.ProcessingTime"
                }
            }
        },
        "domain.ProcedureContent": {
            "type": "object",
            "properties": {
                "prerequisites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "result": {
                    "type": "string"
                },
                "steps": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "domain.ProcedureFee": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number",
                    "format": "float64"
                },
                "currency": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "domain.ProcessingTime": {
            "type": "object",
            "properties": {
                "maxDays": {
                    "type": "integer"
                },
                "minDays": {
                    "type": "integer"
                }
            }
        },
        "domain.Role": {
            "type": "string",
            "enum": [
                "user",
                "admin",
                "org"
            ],
            "x-enum-varnames": [
                "RoleUser",
                "RoleAdmin",
                "RoleOrg"
            ]
        },
        "domain.Subscription": {
            "type": "string",
            "enum": [
                "none",
                "pro"
            ],
            "x-enum-varnames": [
                "SubscriptionNone",
                "SubscriptionPro"
            ]
        },
        "domain.UserDetail": {
            "type": "object",
            "properties": {
                "isBanned": {
                    "type": "boolean"
                },
                "isVerified": {
                    "type": "boolean"
                },
                "subscriptionPlan": {
                    "$ref": "#/definitions/domain.Subscription"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "\"Type 'Bearer' followed by a space and a JWT token.\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}